summary(fit.gamma2)
c(AIC(fit.gamma1))
c(AIC(fit.gamma1), AIC(fit.gamma2), AIC(fit.gamma3))
c(AIC(fit.gamma), AIC(fit.gamma1), AIC(fit.gamma2))
#fit.gamma2
summary(fit.gamma2)
beta <- coef(fit.gamma2)
beta[1]
# f)
plot(time, fitted(fit.gamma2))
abline(0,1, col=2)
par(mfrow=c(2,2))
plot(fit.gamma2, which=1:4)
par(mfrow=c(1,1))
#fit.gamma2
summary(fit.gamma2)
1-pchisq(92.603-7.477, 2)
AIC(fit.gamma2)
fit.gam <- glm(time~t1*t2, family = Gamma(link = "identity"))
summary(fit.gam)
# i)
coefficients(fit.gamma2)
# i)
summary(coefficients(fit.gamma2))
# i)
ceof(summary(fit.gamma2))
# i)
ceofficients(summary(fit.gamma2))
summary(fit.gamma2)
# i)
fit.gamma2$coefficients
# i)
coef(fit)
# i)
coef(summary(fit))
# i)
coef(summary(fit.gamma2))
mu.hat <- fitted(fit.gamma2)
W <- diag(mu.hat)
X <- model.matrix(fit.gamma2)
var.hat <- solve(t(X)%*%W%*%X)
sqrt(diag(var.hat))
phi <- sum((time-mu.hat)^2/mu.hat^2)/(df.residual(fit.gamma2))
phi
wi <- 1/(mu.hat^4*phi)
W <- diag(wi)
X <- model.matrix(fit.gamma2)
var.hat <- solve(t(X)%*%W%*%X)
sqrt(diag(var.hat))
coef(summary(fit.gamma2))
wi <- 1/(mu.hat^2*phi)
W <- diag(wi)
X <- model.matrix(fit.gamma2)
var.hat <- solve(t(X)%*%W%*%X)
sqrt(diag(var.hat))
# j)
beatmin <- beta[2]-beat[3]
# j)
beatmin <- beta[2]-beta[3]
sqrt(diag(var.hat))
var.hat
var <- var.hat[2,2]+var+hat[3,3]-2*var.hat[2,3]
ar.hat[2,2]
var.hat[2,2]
var.hat[2,2]+var+hat[3,3]
var <- as.number(var.hat[2,2])+var+hat[3,3]-2*var.hat[2,3]
as.number(var.hat[2,2])
as.factor(var.hat[2,2])
var <- var.hat[2,2]+var.hat[3,3]-2*var.hat[2,3]
beatmin + c(-1,1)*qnorm(0.975)*solve(var)
beatmin
solve(var)
beatmin + c(-1,1)*qnorm(0.975)*as.vector(solve(var))
beatmin + c(-1,1)*qnorm(0.975)*as.vector(sqrt(var))
load("C:/Users/luisa_rrj8/Desktop/Modelli2/esami/Esame 170911 (testo, dati e soluzione)/dati_esame_m2.RData")
# MUSCLE
bodymass <- c(43.7,43.7,43.7,54.6,54.6,54.6,54.6,55.7,55.7,55.7,55.7,58.8,58.8,60.5,
60.5,60.5,61.9,61.9,61.9,61.9,61.9,66.7,66.7,66.7)
length(bodymass)
worklevel <- c(19,43,56,13,19,43,56,13,26,34.5,43,13,43,19,43,56,13,19,34.5,43,56,13,43,56)
length(worklevel)
# MUSCLE
body_mass <- c(43.7,43.7,43.7,54.6,54.6,54.6,54.6,55.7,55.7,55.7,55.7,58.8,58.8,60.5,
60.5,60.5,61.9,61.9,61.9,61.9,61.9,66.7,66.7,66.7)
length(body_mass)
work_level <- c(19,43,56,13,19,43,56,13,26,34.5,43,13,43,19,43,56,13,19,34.5,43,56,13,43,56)
length(work_level)
heat_output <- c(177,279,346,160,193,280,335,169,212,244,285,181,298,212,317,347,186,216,
265,306,348,209,324,352)
length(heat_output)
X <- cbind(body_mass,work_level,heat_output)
dati <- data.frame(X)
head(dati)
str(dati)
30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9
6+6+12+9+12+6+6+9+9+9+12+9+9+9+9
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9
n/d
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+28*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+29*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+21*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+25*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+18*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+18*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+21*9+21*9+21*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+27
n/d
n/d*110/30
n/d*110/30+12
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+25*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9
n/d
n/d*110/30
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
# non ponderata
n1 <- 30+30+30+30+21+28+25+30+30+26+30+25+28+27+29+30
d1 <- 16
n1/d1
# ponderata
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
# ponderata
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9+21*9*3
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9+9*3
n/d
n/d*110/30
# ponderata
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9+28*9*3
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9+9*3
n/d
n/d*110/30
# ponderata
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
# ponderata
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9
n/d
n/d*110/30
# ponderata
n <- 30*6+30*6+30*12+30*9+21*12+28*6+25*6+30*9+30*9+26*9+30*12+25*9+28*9+27*9+29*9+30*9
d <- 6+6+12+9+12+6+6+9+9+9+12+9+9+9+9+9
n/d
n/d*110/30
n/d*110/30+6
n/d*110/30+7
}
dbinom(x,8)
x <- seq(1,3,100)
dbinom(x,8)
dbinom(x,8,3)
}
library(splines2)
library(gtools)
library(stats4)
library(ggplot2)
install.packages("splines2")
install.packages("gtools")
install.packages("stats4")
library(ggplot2)
install.packages("ggplot2")
install.packages(c("pROC", "tidyverse"))
datx <- seq(-2,2, length=10)
daty <- seq(0,1, length=10)
dirac <- data.frame(cbind(datx,daty))
ggplot(dirac, aes(x=datx, y=daty)) +
geom_line(aes(y = 0), col="blue")+
geom_line(aes(x = 0),  col="blue")+
geom_segment(aes(x=0, xend = 0, y=0, yend = 1), arrow = arrow(length = unit(0.6,"cm")), col="blue")+
geom_point(aes(x = 0, y=0),shape = 21, cex=2, fill = "white", col = "blue")+
labs(x="x" , y="y", xaxes="0") +
theme_bw()
library(gtools)
library(stats4)
library(splines2)
library(ggplot2)
datx <- seq(-2,2, length=10)
daty <- seq(0,1, length=10)
dirac <- data.frame(cbind(datx,daty))
ggplot(dirac, aes(x=datx, y=daty)) +
geom_line(aes(y = 0), col="blue")+
geom_line(aes(x = 0),  col="blue")+
geom_segment(aes(x=0, xend = 0, y=0, yend = 1), arrow = arrow(length = unit(0.6,"cm")), col="blue")+
geom_point(aes(x = 0, y=0),shape = 21, cex=2, fill = "white", col = "blue")+
labs(x="x" , y="y", xaxes="0") +
theme_bw()
ggplot(dirac, aes(x=datx, y=daty)) +
geom_line(aes(y = 0), col="blue")+
geom_line(aes(x = 0),  col="blue")+
geom_segment(aes(x=0, xend = 0, y=0, yend = 1), col="blue")+
geom_point(aes(x = 0, y=0),shape = 21, cex=2, fill = "white", col = "blue")+
labs(x="x" , y="y", xaxes="0") +
theme_bw()
ggplot(dirac, aes(x=datx, y=daty)) +
geom_line(aes(y = 0), col="blue")+
geom_line(aes(x = 0),  col="blue")+
geom_segment(aes(x=0, xend = 0, y=0, yend = 1), col="blue")+
geom_point(aes(x = 0, y=0),shape = 21, cex=2, fill = "white", col = "blue")+
geom_point(aes(x = 0, y=1),shape = 21, cex=2, fill = "blue", col = "blue")+
labs(x="x" , y="y", xaxes="0") +
theme_bw()
library(geoR)
library(geoRglm) # Geostatistics
# Esempio 1: altitudine della superficie
data(elevation)
# 1) variogramma parametrico, famiglia di matern, e effetto nugget
v1 <- variog(elevation, uvec = seq(0, 8, by = 0.5)) # variogramma sulle distanze senza direzione
# do sequenza in cui dividere gli intervallini
plot(v1, ylim=c(0,8000), xlim=c(0,8)) # variogramma campionario
wls <- variofit(v1, ini = c(6000, 6), cov.model = "matern", kappa = 1.5)
wls #stime --> tau^2 è stimato come nullo (errore di misura)
?variofit  #  fix.nugget = FALSE
# aggiugo al variogramma campionario il modello stimato con effetto nugget
lines.variomodel(seq(0, 10, l = 1000), cov.pars = wls$cov.pars, cov.model =
"matern", kappa = 1.5, nugget = wls$nugget)
# assumiamo k=1.5
ml0_15 <- likfit(elevation, ini = c(3000, 2), cov.model = "matern", kappa = 1.5)
summary(ml0_15)
# assumiamo k=1
ml0_1 <- likfit(elevation, ini = c(3000, 2), cov.model = "matern", kappa = 1)
summary(ml0_1)
# assumiamo k=0.5
ml0_05 <- likfit(elevation, ini = c(3000, 2), cov.model = "matern", kappa = 0.5)
summary(ml0_05)
# assumiamo k=2 --> all'aumentare del k aumenta la stima dell'effetto nugget
ml0_2 <- likfit(elevation, ini = c(3000, 2), cov.model = "matern", kappa = 2)
summary(ml0_2)
# Pr il modello spaziale Gaussiano scelto, interpoliamo il variogramma teorico stimato (nella famiglia Matern) sotto
# il modello:
v1 <- variog(elevation, uvec = seq(0,8, by = 0.5))
plot(v1, ylim=c(0,8000), xlim=c(0,8))
ml0_15$cov.pars   #(sigmasq, phi)
ml0_15$nugget   # nugget = tausq = 0
lines.variomodel(seq(0, 10, l = 1000), cov.pars = ml0_15$cov.pars, cov.model =
"matern", kappa = 1.5, nugget = ml0_15$nugget)
# modello spaziale Gaussiano con trend della media
# trend lineare
# con k=1.5
mll_15 <- likfit(elevation, trend = "1st", ini = c(1300, 2), cov.model = "matern", kappa = 1.5)
summary(mll_15) # la stima dell'effetto nugget non è variata considerevolmente
names(mll_15)
mll_15$model.components # componenti del modello (trend, spatial, residual)
# plottiamo il variogramma teorico stimato (nella famiglia Matern con k=1.5) sotto il modello:
v1 <- variog(elevation, trend = "1st", uvec = seq(0,8, by = 0.5))
plot(v1, ylim=c(0,3800), xlim=c(0,8))
lines.variomodel(seq(0, 8, l = 1000), cov.pars = mll_15$cov.pars, cov.model =
"matern", kappa = 1.5, nugget = mll_15$nugget, lty=2)
# plottiamo il variogramma teorico stimato (nella famiglia Matern con k=1.5) sotto il modello:
v1 <- variog(elevation, trend = "1st", uvec = seq(0, 8, by = 0.5))
plot(v1, ylim=c(0,3800), xlim=c(0,8))
lines.variomodel(seq(0, 8, l = 1000), cov.pars = mll_15$cov.pars, cov.model =
"matern", kappa = 1.5, nugget = mll_15$nugget, lty=2)
# il modello riesce a spiegare gran parte della variazione spaziale
abline(h=1643+34.9, lty=2, col= "blue")  # linea per il sill
abline(h=0.95*1693 + 34.9, lty=2, col= "red") # rangepratico
abline(v=0.95*1693 + 34.9, lty=2, col= "red") # rangepratico
plot(v1, ylim=c(0,3800), xlim=c(0,8))
lines.variomodel(seq(0, 8, l = 1000), cov.pars = mll_15$cov.pars, cov.model =
"matern", kappa = 1.5, nugget = mll_15$nugget, lty=2)
# il modello riesce a spiegare gran parte della variazione spaziale
abline(h=1643+34.9, lty=2, col= "blue")  # linea per il sill
# range pratico --> nel summary = 3.824244
0.95*1693 + 34.9 # valore del semivariogramma corrispondente al range pratico
abline(v=0.95*1693 + 34.9, lty=2, col= "red") # rangepratico
abline(v=0.95*1693 + 34.9, lty=2, col= "red") # rangepratico
abline(h=0.95*1693 + 34.9, lty=2, col= "red") # rangepratico
# confrontiamolo con i variogrammi per k=2.5 e k=0.5
# faccio il grafico con tutti i vari k per un confronto
plot(v1, ylim=c(0,3800), xlim=c(0,8))
lines.variomodel(seq(0, 8, l = 1000), cov.pars = mll_15$cov.pars, cov.model =
"matern", kappa = 1.5, nugget = mll_15$nugget, lty=2)
mll_25 <- likfit(elevation, trend = "1st", ini = c(1300, 2), cov.model = "matern", kappa = 2.5)
lines.variomodel(seq(0, 8, l = 1000), cov.pars = mll_25$cov.pars, cov.model =
"matern", kappa = 2.5, nugget = mll_25$nugget)
mll_05 <- likfit(elevation, trend = "1st", ini = c(1300, 2), cov.model = "matern", kappa = 0.5)
lines.variomodel(seq(0, 8, l = 1000), cov.pars = mll_05$cov.pars, cov.model =
"matern", kappa = 0.5, nugget = mll_05$nugget, lty=3)
# modello Gaussiano con trend quadratico per la media di Y
# con k=1.5
mlq_15 <- likfit(elevation, trend ="2nd", ini = c(3000, 2), cov.model = "matern", kappa = 2)
summary(mlq_15)
# Vediamo anche il variogramma teorico sotto questo modello Gaussiano:
v1 <- variog(elevation, trend = "2nd", uvec = seq(0,8, by = 0.5))
plot(v1, ylim=c(0,8000), xlim=c(0,8))
lines.variomodel(seq(0, 8, l = 1000), cov.pars = mlq_15$cov.pars, cov.model = "matern", kappa = 1.5, nugget = mlq_15$nugget)
# - confronto tra il modello Gaussiano con trend lineare e il modello stazionario
llrt <- 2*(mll_15$loglik - ml0_15$loglik)
1-pchisq(llrt,df=2)  # chiquadro con 2 gradi di libertÃ 
0.1325175
# - confronto tra il modello Gaussiano con trend quadratico e quello con trend lineare
llrt <- 2*(mlq_15$loglik - mll_15$loglik)
1-pchisq(llrt,df=3)  # chiquadro con 3 gradi di libertÃ 
library(geoR)
# Esempio 2: livello di calcio nel terreno
# studio per vedere le proprietà del terreno per utilizzo fertilizzanti
data(ca20)
class(ca20)
# 1) analisi descrittiva dei dati spaziali
summary(ca20)
# altitudine e area --> con diversi utilizzi di fertilizzante
# range diatanze osservate
with(ca20, hist(data, main = "", xlab = "elevation")) # istogramma calcio --> sembra normale
with(ca20, plot(data,coords[, 1],  xlab = "W-E", ylab = "Calcium data", pch = 20, cex = 0.7)) # calcio e prima coord
lines(lowess( ca20$coords[, 1] ~ca20$data)) # possibile assenza di dipendenza
with(ca20, plot(coords[, 2], data, xlab = "S-N", ylab = "Calcium data", pch = 20, cex = 0.7))
lines(with(ca20, lowess(data ~ coords[, 2]))) # trend lineare
# tre regioni
points(ca20,  cex.max = 2)# area totale
points(ca20,  cex.max = 2, borders=reg1, add.to.plot=TRUE)
points(ca20,  cex.max = 2, borders=reg2, add.to.plot=TRUE)
# 2) variogramma campionario --> possibili trend spaziali
plot(variog(ca20, uvec = seq(0, 1150, by = 50)), type = "b")
pplot(ca20)
plot(ca20)
# 2) variogramma campionario --> possibili trend spaziali
plot(variog(ca20, uvec = seq(0, 1150, by = 50)), type = "b")
# 2) grafico a cerchi e variogramma
# tre regioni
points(ca20,  cex.max = 2)# area totale
points(ca20,  cex.max = 2, borders=reg1, add.to.plot=TRUE)
points(ca20,  cex.max = 2, borders=reg2, add.to.plot=TRUE)
#variogramma campionario --> possibili trend spaziali
plot(variog(ca20, uvec = seq(0, 1150, by = 50)), type = "b")
# mi costruisco i residui
res.v1 <- variog(ca20, trend = "1st", uvec = seq(0, 1150, by=50))
plot(res.v1, type = "b")
points(ca20, trend = "1st", cex.max = 2)
points(ca20, trend = "1st", cex.max = 2)
# 3) variogramma campionario  nei diversi modelli M1, .., M5
res1.v <- variog(ca20, trend = ~area, uvec = seq(0, 1150, by = 50))
plot(res1.v, type = "b")
# aggiungo esplicativa: altitudine
res2.v <- variog(ca20, trend = ~area + altitude , uvec = seq(0, 1150, by = 50))
lines(res2.v, type = "b",lty=2)
# aggiungo le due coordinate
res3.v <- variog(ca20, trend = ~area + coords[,1] + coords[,2], uvec = seq(0, 1150, by=50))
lines(res3.v, type = "b", lty=3)
# grafici --> se inserisco trend i grafici sono costruiti sui residui
plot(ca20, lowess=T)
plot(ca20, trend=~area, lowess=T)
plot(ca20, trend=~area+altitude, lowess=T)
plot(ca20, trend=~area+coords[,1] + coords[,2], lowess=T)
# 4)  Modello Gaussiano  - stima dei parametri tramite il metodo di massima verosimiglianza
# M1: modello Gaussiano stazionario con media costante
# funzione di correlazione rho(u) nella famiglia di Matern con k=0.5
ml1 <- likfit(ca20, ini = c(100, 50), cov.model = "matern", kappa = 0.5)
# 4)  Modello Gaussiano  - stima dei parametri tramite il metodo di massima verosimiglianza
# M1: modello Gaussiano stazionario con media costante
# funzione di correlazione rho(u) nella famiglia di Matern con k=0.5
ml1 <- likfit(ca20, ini = c(100, 50), cov.model = "matern", kappa = 0.5)
summary(ml1)
plot(variog(ca20, uvec = seq(0, 1150, by = 50)))
lines.variomodel(seq(0,1150,l=1000), cov.pars=ml1$cov.pars, cov.model = "matern", kappa=0.5, nugget= ml1$nugget)
#  M2: modello spaziale Gaussiano con modello per la media che include la var "area"
ml2 <- likfit(ca20, ini = c(100, 50), trend = ~area, cov.model = "matern", kappa = 0.5)
summary(ml2)
# confronto tra il modello M2 e M1 tramite test del log rapporto delle verosimiglianze
2*(-656.2 + 680.2)
1-pchisq(2*(-656.2 + 680.2),df=2)
#  M3: modello spaziale Gaussiano con modello per la media che include la var "area e altitudine"
ml3 <- likfit(ca20, ini = c(100, 50), trend = ~area+ altitude, cov.model = "matern", kappa = 0.5)
summary(ml3)
2*(-656.2 + 656.2)
1-pchisq(2*(-656.2 + 656.2),df=2) # modello M2
#  M4: modello spaziale Gaussiano con modello per la media che include la var "area e coords[,1] + coords[,2]"
ml4 <- likfit(ca20, ini = c(100, 50), trend = ~area+ coords[,1] + coords[,2], cov.model = "matern", kappa = 0.5)
summary(ml4)
2*(-649.7 + 656.2)
1-pchisq(2*(-649.7 + 656.2),df=2)  # modello M4
#  M5: modello spaziale Gaussiano con modello per la media che include la var "area e altitudine e coords[,1] + coords[,2]"
ml5 <- likfit(ca20, ini = c(100, 50), trend = ~area+ altitude+ coords[,1] + coords[,2], cov.model = "matern", kappa = 0.5)
summary(ml5)
2*(-647.7 + 649.7)
1-pchisq(2*(-647.7 + 649.7),df=2)  # modello M4
#  M3: modello spaziale Gaussiano con modello per la media che include la var "area e altitudine"
ml3 <- likfit(ca20, ini = c(100, 50), trend = ~area+ altitude, cov.model = "matern", kappa = 0.5)
summary(ml3)
2*(-656.2 + 656.2)
setwd("~/GitHub/msbd")
library(tree)
library(tree)
set.seed(42)
x <- read.csv("espl.csv", header=T)
head(x)
y <- read.csv("y-2s.csv", header=T)
head(y)
dati <- data.frame(cbind(y, x))
head(dati)
str(dati)
ix <- sample(1:nrow(x), nrow(x)/2)
x_train <- x[ix,]
y_train <- y[ix,]
head(x)
head(y)
y <- read.csv("y-2s.csv", header=F)
head(y)
dati <- data.frame(cbind(y, x))
head(dati)
str(dati)
ix <- sample(1:nrow(x), nrow(x)/2)
x_train <- x[ix,]
y_train <- y[ix,]
x_val <- x[-ix,]
y_val <- y[-ix,]
dati_train <- dati[ix,]
dati_val <- dati[-ix,]
dati_val <- dati_val[-1165,]
dim(dati_train)
dim(dati_val)
hr_base_model <- rpart(dati_train$tipo~dati_train$intTrapz+dati_train$maxA+dati_train$MVDeriv+
dati_train$meanA+dati_train$Var+dati_train$Med, dati = dati_train, method = "class",
control = rpart.control(cp = 0))
library(rpart)
hr_base_model <- rpart(dati_train$tipo~dati_train$intTrapz+dati_train$maxA+dati_train$MVDeriv+
dati_train$meanA+dati_train$Var+dati_train$Med, dati = dati_train, method = "class",
control = rpart.control(cp = 0))
head(dati_train)
hr_base_model <- rpart(dati_train$V2~dati_train$intTrapz+dati_train$maxA+dati_train$MVDeriv+
dati_train$meanA+dati_train$Var+dati_train$Med, dati = dati_train, method = "class",
control = rpart.control(cp = 0))
library(rpart.plot)
hr_base_model <- rpart(dati_train$V2~dati_train$maxA+dati_train$MVDeriv+
dati_train$meanA+dati_train$Var+dati_train$Med, dati = dati_train, method = "class",
control = rpart.control(cp = 0))
install.packages("rpart.plot")
install.packages("rpart")
setwd("~/GitHub/msbd")
library(tree)
set.seed(42)
x <- read.csv("espl.csv", header=T)
head(x)
y <- read.csv("y-2s.csv", header=F)
head(y)
dati <- data.frame(cbind(y, x))
head(dati)
str(dati)
ix <- sample(1:nrow(x), nrow(x)/2)
x_train <- x[ix,]
y_train <- y[ix,]
x_val <- x[-ix,]
y_val <- y[-ix,]
dati_train <- dati[ix,]
ix <- sample(1:nrow(x), nrow(x)*0.75)
x_train <- x[ix,]
y_train <- y[ix,]
x_val <- x[-ix,]
y_val <- y[-ix,]
dati_train <- dati[ix,]
dati_val <- dati[-ix,]
dati_val <- dati_val[-1165,]
dim(dati_train)
dim(dati_val)
head(dati_train)
library(rpart.plot)
hr_base_model <- rpart(y_train$V2~dati_train$maxA+dati_train$MVDeriv+
dati_train$meanA+dati_train$Var+dati_train$Med, dati = dati_train, method = "class",
control = rpart.control(cp = 0))
head(y_train)
hr_base_model <- rpart(y_train$V2~x_train$maxA+x_train$MVDeriv+
x_train$meanA+x_train$Var+x_train$Med, method = "class",
control = rpart.control(cp = 0))
summary(hr_base_model)
#Plot Decision Tree
plot(hr_base_model)
# Examine the complexity plot
printcp(hr_base_model)
plotcp(hr_base_model)
predict(hr_base_model)
predict(hr_base_model, newdata=x_val)
dim(predict(hr_base_model, newdata=x_val))
hr_base_model <- rpart(y_train$V2~x_train$maxA+x_train$MVDeriv+
x_train$meanA+x_train$Var+x_train$Med, method = "class")
summary(hr_base_model)
